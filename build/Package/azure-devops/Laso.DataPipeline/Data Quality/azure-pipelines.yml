pool:
  vmImage: 'Ubuntu-16.04'

trigger:
  batch: true
  branches:
    include:
    - develop
    - master 
  paths:
    include:
    - src/dataPipeline/data-quality/*
    - src/dataPipeline/framework/*
    - src/dataPipeline/steplibrary/*
    - build/Package/azure-devops/Laso.DataPipeline/Data Quality/*
    - deploy/azure/terraform/applications/Insights/data-quality/*
    - deploy/azure/terraform/environments/*
    - deploy/azure/terraform/global/*
    - deploy/azure/terraform/modules/*

variables:
  artifactType: 'package'
  projectPath: './src/dataPipeline'
  packageName: 'data-quality'
  archiveContainer: 'dataquality'
  tempdirectory : '$(System.DefaultWorkingDirectory)/temp'
  testfolderPath: '$(Build.SourcesDirectory)/src/tests/Insights.FunctionalTests'
  testProjectPath: '$(testfolderPath)/Insights.FunctionalTests.csproj'
  #prod builds
  ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
    buildVersion: '1.0.$(Build.BuildId)'
    buildVersionTag: '1.0.$(Build.BuildId)-rc'
    buildTag: 'master'
  #non-prod builds
  ${{ if ne(variables['Build.SourceBranchName'], 'master') }}:
    buildVersion: '1.0.$(Build.BuildId)-pre'
    buildVersionTag: '1.0.$(Build.BuildId)-pre'
    buildTag: 'develop'    

steps:
- task: PowerShell@2
  displayName: 'Create Temp Directory'
  inputs:
    targetType: 'inline'
    script: |
      new-item '$(tempDirectory)' -ItemType Directory
    pwsh: true
    
- task: PowerShell@2
  displayName: 'Write Build State'
  inputs:
    targetType: 'inline'
    script: |
      $buildState = @{}
      $buildState.Date= Get-Date  -format yyyy-MM-ddTHH-mm-ss-ff
      $buildState.BuildVersion= "$(buildVersion)"
      $buildState.BuildVersionTag ="$(buildVersionTag)"
      $buildState.ImageName = "$(packageName)"
      $buildState.BuildTag = "$(buildTag)"
      $buildState.ArtifactType= "$(artifactType)"
      $buildState.Build = @{}
      $buildState.Build.URI =  '$(Build.BuildUri)'
      $buildState.Build.BuildId =  '$(Build.BuildId)'
      $buildState.Build.BuildNumber =  '$(Build.BuildNumber)'
      $buildState.Build.DefinitionName =  '$(Build.DefinitionName)'
      $buildState.Build.QueuedBy =  '$(Build.QueuedBy)'
      $buildState.Build.SourceVersion =  '$(Build.SourceVersion)'
      $buildState.Build.SourceBranchName =  '$(Build.SourceBranchName)'
      $buildState.Build.RepoURI =  '$(Build.Repository.Uri)'
            
      $buildState | ConvertTo-Json -depth 100 | Out-File "$(Build.ArtifactStagingDirectory)\buildState.json"
    pwsh: true

- task: PowerShell@2
  displayName: 'Write Init File'
  inputs:
    targetType: 'inline'
    script: |
      $version = "__version__ = `"$(buildVersion)`""            
      $version | Out-File "$(tempDirectory)\__init__.py"

      Get-Content "$(tempDirectory)\__init__.py"
    pwsh: true
    
- task: CopyFiles@2
  displayName: 'Copy Common Files'
  inputs:
    SourceFolder: 'src/dataPipeline/'
    Contents: |
      framework/**/?(*.py|*.yml)
      steplibrary/**/?(*.py|*.yml)
      !framework/__pycache__/**
      !framework/env/**
      !framework/.venv/**
      !framework/ARCHIVE/**
      !framework/mypy_cache/**
      !framework/tests/**
      !steplibrary/__pycache__/**
      !steplibrary/env/**
      !steplibrary/.venv/**
      !steplibrary/ARCHIVE/**
      !steplibrary/mypy_cache/**
      !steplibrary/tests/**
    TargetFolder: '$(tempDirectory)'

- task: CopyFiles@2
  displayName: 'Copy Project Files'
  inputs:
    SourceFolder: 'src/dataPipeline/$(packageName)/'
    Contents: |
      config/**/?(*.py|*.yml|*.json)
      services/**/?(*.py|*.yml)
      runtime/**/?(*.py|*.yml)
      __dbs-main__.py
      __main__.py
      requirements.txt
      !__pycache__/**
      !env/**
      !.venv/**
      !ARCHIVE/**
      !mypy_cache/**
      !tests/**
    TargetFolder: '$(tempDirectory)'

- task: ArchiveFiles@2
  displayName: 'Create Archive'
  inputs:
    rootFolderOrFile: '$(tempDirectory)'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/$(packageName).$(buildVersion).zip'
    replaceExistingArchive: true

- task: AzureCLI@2
  displayName: 'Upload To Blob Storage'
  inputs:
    azureSubscription: 'LASO Development (50954c79-c9a7-4822-b2ee-603cb18d3260)'
    scriptType: 'pscore'
    scriptLocation: 'inlineScript'
    inlineScript: 'az storage blob upload --account-name "lasobuildartifacts" --container-name "$(archiveContainer)" --file "$(Build.ArtifactStagingDirectory)/$(packageName).$(buildVersion).zip" --name "$(buildVersion)/$(packageName).$(buildVersion).zip"'

- task: CopyFiles@2
  displayName: 'Copy Terraform artifacts'
  inputs:
    SourceFolder: 'deploy/azure/terraform/applications/Insights/data-quality'
    Contents: '**/*'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'

- task: CopyFiles@2
  displayName: 'Copy Terraform artifacts'
  inputs:
    SourceFolder: 'src/dataPipeline'
    Contents: |
      release-data-quality.config
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
- task: PublishBuildArtifacts@1
  displayName: Publish Artifacts
  condition: succeeded()
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'

- task: DotNetCoreCLI@2
  displayName: Build functional Tests
  inputs:
    command: 'build'
    projects: '$(testProjectPath)'

- task: CopyFiles@2
  displayName: 'Copy test files to staging'
  inputs:
    SourceFolder: '$(testfolderPath)/bin'
    Contents: '**'
    TargetFolder: '$(Build.ArtifactStagingDirectory)/testArtifacts'

- task: PublishBuildArtifacts@1
  displayName: Publish Artifacts
  condition: succeeded()
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(packageName).$(buildVersion).zip'
