pool:
  vmImage: 'Ubuntu-16.04'

trigger:
  batch: true
  branches:
    include:
    - develop
    - master 
  paths:
    include:
    - src/services/Provisioning/*
    - deploy/azure/terraform/applications/Insights/*

variables:
  imageName: 'laso-provisioning-api'
  projectPath: './src/services/Provisioning/Provisioning.Api'
  #prod builds
  ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
    buildVersion: '1.0.0.$(Build.BuildId)'
    buildVersionTag: '1.0.0.$(Build.BuildId)-rc'
    buildTag: 'master'
    registryConnectionName: 'container-crlasoprev'
  #non-prod builds
  ${{ if ne(variables['Build.SourceBranchName'], 'master') }}:
    buildVersion: '1.0.0.$(Build.BuildId)-pre'
    buildVersionTag: '1.0.0.$(Build.BuildId)-pre'
    buildTag: 'develop'
    registryConnectionName: 'container-crlasodev'
  
steps:
- bash: |
      echo "##vso[build.addbuildtag]$(buildTag)"
- task: Docker@2
  displayName: 'login to $(registryConnectionName)'
  inputs:
    containerRegistry: '$(registryConnectionName)'
    command: 'login'
- task: Docker@2
  displayName: 'build container'
  inputs:
    containerRegistry: '$(registryConnectionName)'
    repository: '$(imageName)'
    command: 'build'
    Dockerfile: '$(projectPath)/Dockerfile'
    buildContext: '$(Build.Repository.LocalPath)/src'
    tags: |
      $(Build.BuildId)
      $(buildVersionTag)
    arguments: '--build-arg  buildVersion=$(buildVersion)'
- task: Docker@2
  displayName: 'push to $(registryConnectionName)'
  inputs:
    containerRegistry: '$(registryConnectionName)'
    repository: '$(imageName)'
    command: 'push'
    tags: |
      $(Build.BuildId)
      $(buildVersionTag)
- task: CopyFiles@2
  displayName: 'Copy Terraform artifacts'
  inputs:
    SourceFolder: './deploy/azure/terraform'
    Contents: '**/*'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
- task: PublishBuildArtifacts@1
  displayName: Publish Artifacts
  condition: succeeded()
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'

