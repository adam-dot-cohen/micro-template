pool:
  vmImage: 'Ubuntu-16.04'

trigger:
  batch: true
  branches:
    include:
    - develop
    - master 
  paths:
    include:
    - src/services/Provisioning/*
    - src/components/Hosting/*
    - src/components/IntegrationEvents/*
    - src/components/IntegrationMessages/*
    - src/components/IO/*
    - src/components/Filters/*
    - src/components/TableStorage/*
    - deploy/azure/terraform/applications/Insights/provisioning-service/*
    - deploy/azure/terraform/environments/*
    - deploy/azure/terraform/global/*
    - deploy/azure/terraform/modules/*
    exclude:
    - src/services/Provisioning/Provisioning.sftp/*

variables:
  imageName: 'laso-provisioning-api'
  artifactType: 'container'
  solutionPath: '$(Build.SourcesDirectory)/src/services/Provisioning'
  projectPath: '$(solutionPath)/Provisioning.Api'
  #prod builds
  ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
    buildVersion: '1.0.0.$(Build.BuildId)'
    buildVersionTag: '1.0.0.$(Build.BuildId)-rc'
    buildTag: 'master'
    registryConnectionName: 'container-crlasostg'
  #non-prod builds
  ${{ if ne(variables['Build.SourceBranchName'], 'master') }}:
    buildVersion: '1.0.0.$(Build.BuildId)-pre'
    buildVersionTag: '1.0.0.$(Build.BuildId)-pre'
    buildTag: 'develop'
    registryConnectionName: 'container-crlasodev'
  
steps:
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $buildState = @{}
      $buildState.Date= Get-Date  -format yyyy-MM-ddTHH-mm-ss-ff
      $buildState.BuildVersion= "$(buildVersion)"
      $buildState.BuildVersionTag ="$(buildVersionTag)"
      $buildState.ImageName = "$(imageName)"
      $buildState.BuildTag = "$(buildTag)"
      $buildState.ArtifactType= "$(artifactType)"
      $buildState.Build = @{}
      $buildState.Build.URI =  '$(Build.BuildUri)'
      $buildState.Build.BuildId =  '$(Build.BuildId)'
      $buildState.Build.BuildNumber =  '$(Build.BuildNumber)'
      $buildState.Build.DefinitionName =  '$(Build.DefinitionName)'
      $buildState.Build.QueuedBy =  '$(Build.QueuedBy)'
      $buildState.Build.SourceVersion =  '$(Build.SourceVersion)'
      $buildState.Build.SourceBranchName =  '$(Build.SourceBranchName)'
      $buildState.Build.RepoURI =  '$(Build.Repository.Uri)'
      
      $buildState | ConvertTo-Json -depth 100 | Out-File "$(Build.ArtifactStagingDirectory)\buildState.json"
    pwsh: true
- bash: |
      echo "##vso[build.addbuildtag]$(buildTag)"

- task: DotNetCoreCLI@2
  displayName: Test
  inputs:
    command: 'test'
    projects: '$(solutionPath)/**/*Tests.csproj'
    arguments: '--filter "(Capability!=\"Storage Emulator\" & Capability!=\"Managed Identity\")" --collect "XPlat Code Coverage" /p:Include="[Laso.*]*" /p:Exclude="[*Tests]*"'
    modifyOutputPath: true

- task: Palmmedia.reportgenerator.reportgenerator-build-release-task.reportgenerator@4
  displayName: Generate Code Coverage Report
  inputs:
    reports: $(Agent.TempDirectory)/**/coverage.cobertura.xml
    targetdir: $(Common.TestResultsDirectory)
    reporttypes: 'HtmlInline_AzurePipelines;Cobertura'

- task: PublishCodeCoverageResults@1
  displayName: Publish Code Coverage Results
  inputs:
    codeCoverageTool: cobertura
    summaryFileLocation: $(Common.TestResultsDirectory)/Cobertura.xml
    reportDirectory: $(Common.TestResultsDirectory)

- task: Docker@2
  displayName: Build Container
  inputs:
    containerRegistry: '$(registryConnectionName)'
    repository: '$(imageName)'
    command: 'build'
    Dockerfile: '$(projectPath)/Dockerfile'
    buildContext: '$(Build.Repository.LocalPath)/src'
    tags: |
      $(Build.BuildId)
      $(buildVersionTag)
    arguments: '--build-arg  buildVersion=$(buildVersion)'

- task: Docker@2
  displayName: Login to Docker Registry
  inputs:
    containerRegistry: '$(registryConnectionName)'
    command: 'login'

- task: Docker@2
  displayName: Push to Docker Registry
  inputs:
    containerRegistry: '$(registryConnectionName)'
    repository: '$(imageName)'
    command: 'push'
    tags: |
      $(Build.BuildId)
      $(buildVersionTag)

- task: CopyFiles@2
  displayName: Copy Terraform Artifacts
  inputs:
    SourceFolder: './deploy/azure/terraform'
    Contents: '**/*'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'

- task: PublishBuildArtifacts@1
  displayName: Publish Build Artifacts
  condition: succeeded()
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
